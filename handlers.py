from aiogram import Bot, types, Dispatcher, executor
from aiogram import Bot, types, Dispatcher, executor
from sql import save_contact_to_database

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API Telegram
bot = Bot(token='6781534893:AAFCBKyrHMID3lpFRqWSyGaWGK5wA3ng7yU')
dp = Dispatcher(bot)



@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    help_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é Triumph-Adler.\n\n"
    help_text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    help_text += "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
    help_text += "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    help_text += "/instructions - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é\n"
    help_text += "/support - –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n"
    help_text += "/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n"
    help_text += "/site - –û—Ç–∫—Ä—ã—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç Triumph-Adler\n"

    await message.reply(help_text)

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    btn2 = types.KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞')
    btn3 = types.KeyboardButton('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
    markup.add(btn1, btn2, btn3)


    photo_path = 'pictures/file.jpg'
    with open(photo_path, mode='rb') as photo:
        await bot.send_photo(message.chat.id, photo)

    await bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ß–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ /help, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
        reply_markup= markup
    )


@dp.message_handler(commands=['site'])
async def process_site_command(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä–æ–µ—Ç —Å–∞–π—Ç
    markup = types.InlineKeyboardMarkup()
    site_button = types.InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', url='https://www.triumph-adler.com')
    markup.add(site_button)
 # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç:", reply_markup=markup)


@dp.message_handler(lambda message: message.text == '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
async def process_support_button(message: types.Message):
    feedback_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    positive_btn = types.KeyboardButton('üëç –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è', callback_data='positive_feedback')
    negative_btn = types.KeyboardButton('üëé –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è', callback_data='negative_feedback')
    back_btn = types.KeyboardButton('–ù–∞–∑–∞–¥')
    feedback_markup.row(positive_btn, negative_btn)
    feedback_markup.row(back_btn)

    await message.reply("–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:", reply_markup=feedback_markup)

@dp.message_handler(lambda message: message.text == 'üëç –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è' )
async def process_feedback_button(message: types.Message):
    await message.answer("–°–ø–∞—Å–∏–±–æ, –ß—É—à–ø–∞–Ω!")

@dp.message_handler(lambda message: message.text == 'üëé –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è' )
async def process_feedback_button(message: types.Message):
    await message.answer("–ë–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏ —Å—é–¥–∞")
    await bot.send_sticker(message.chat.id, sticker = "CAACAgEAAxkBAAELNCNlqBRu7ClX26Hd5_wX-IM24mky2wAC8gEAAufQ0xnLvDvqVrO-0TQE")

@dp.message_handler(lambda message: message.text == '–ù–∞–∑–∞–¥')
async def process_back_button(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    btn2 = types.KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞')
    btn3 = types.KeyboardButton('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
    markup.add(btn1, btn2, btn3)

    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)


@dp.message_handler(lambda message: message.text == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
async def instruction(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('TA Color 2508ci / 3508ci')
    btn3= types.KeyboardButton('TASKalfa 2553ci')
    btn2 = types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.row(btn1, btn3)
    markup.row(btn2)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:", reply_markup=markup)




@dp.message_handler(lambda message: message.text == 'TA Color 2508ci / 3508ci')
async def send_instruction_video(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ —á–∞—Ç
    video_path = 'videos/video.mp4'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É
    caption_text = ("–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –º—ã –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –º–µ—Ç–æ–¥—ã —É–ª—É—á—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –Ω–∏–∑–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –ø–∏–∫—Å–µ–ª–µ–π –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞—Ö Kyocera TASKalfa Color 2508ci / 3508ci."
                    " –í—ã —É–∑–Ω–∞–µ—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–µ–º—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏."
                    " –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è. "
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä TA Triumph-Adler –¥–ª—è –≤–∞—à–µ–π –ø–µ—á–∞—Ç–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏!")
    with open(video_path, 'rb') as video:
        await bot.send_video(message.chat.id, video, caption=caption_text)

@dp.message_handler(lambda message: message.text == 'TASKalfa 2553ci')
async def send_instruction_video(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ —á–∞—Ç
    video_path = 'videos/video3.mp4'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É
    caption_text = ("–í —ç—Ç–æ–º –≤–∏–¥–µ–æ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∑–∞–º–µ–Ω–µ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–æ–Ω–µ—Ä–∞ –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–µ Kyocera TASKalfa."
                    " –°–ª–µ–¥—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–º —à–∞–≥–∞–º, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. "
                    "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º."
                    " –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ SumnerOne –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–∞—à–∏—Ö –ø–µ—á–∞—Ç–Ω—ã—Ö –Ω—É–∂–¥!")
    with open(video_path, 'rb') as video:
        await bot.send_video(message.chat.id, video, caption=caption_text)




@dp.message_handler(lambda message: message.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞')
async def process_support_button(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    contact_button = types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)
    back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
    contact_markup.row(contact_button)
    contact_markup.row(back_button)

    await message.reply("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è", reply_markup=contact_markup)



@dp.message_handler(content_types=types.ContentTypes.CONTACT)
async def process_contact(message: types.Message):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
    user_id = message.from_user.id
    user_name = f"{message.from_user.first_name} {message.from_user.last_name}"
    phone_number = message.contact.phone_number

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (SQLite)
    save_contact_to_database(user_id, phone_number, user_name)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, {user_name}! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üì≤")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
